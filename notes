// this file is for notes taken
Source:
https://fusion.engineering/intro-to-incremental-non-linear-dynamic-inversion-indi/
PID:
  The proportional part of the controller is a constant multiplied by the position error, becoming larger the further the drone is pulled away from its target.
  The derivative part of the controller determines how much “damping” is applied to our system.
  The integrator is to reject any sorts of steady state offsets which can originate from unknown disturbances as well as unforeseen inaccuracies in the model.
PID is that it is model-free. what this means is that you do not need to know the dynamic behaviour of the drone you will be flying prior to implementing the PID controller into the system so what this does is it gives you the freedom to tune each of the P, I, and D gains on a generic controller through experimentation fairly easily.
Why are we not using PID in our flight controller?
So the question then becomes, how reactive and aggressive do I want to make the system?
Example:
Under very windy conditions, you will be experiencing very large and sudden gusts, forcing you to give the integrator larger freedom to operate. We can see this backfiring in a situation where the drone is crossing through a strong wind stream; The integrator will begin to rapidly apply a very large force to reject the disturbance, but when it exits the stream to an area without any wind force pushing against the now “filled” integrator, the drone will aggressively overshoot, leading to a potential crash.
NDI is extremely model-dependent, where the whole point of this method is more about changing the dynamic behaviour of your system by implementing dynamics you would like your machine to have. 
Example:
We have a heavy industrial robotic arm which you would want to be extended and retracted effortlessly. What NDI does here is calculating the forces and moments needed to manipulate the arm based on its weight, length, etc and cancel them out by applying the exact opposite forces and inertias. That way, when a human pushes against the arm, it will feel almost as light as a feather.
How do you determine the system model when implementing Nonlinear Dynamic Inversion (NDI) on a drone?
  To implement NDI, you need a mathematical model that accurately describes the system's dynamics. For something like a robotic arm, this is relatively simple because its structure and operating conditions are predictable. For drones, however, modeling is more complex due to the unsteady and dynamic nature of flight. Factors like variable airflows, rapid movements, and noisy sensor data make it harder to obtain precise parameters. Without a reliable model, NDI can't effectively cancel out the system's natural dynamics or impose the desired behavior.
